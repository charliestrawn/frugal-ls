name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: go build -v -o frugal-ls ./cmd/frugal-ls
    
    - name: Test binary runs
      run: ./frugal-ls --help || echo "Binary runs (exit code $?)"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Run 'gofmt -s -w .'"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "go.mod or go.sum is not tidy"
          git diff go.mod go.sum
          exit 1
        fi

  vscode-extension:
    name: VS Code Extension
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: vscode-extension/package-lock.json
    
    - name: Install dependencies
      run: |
        cd vscode-extension
        npm ci
    
    - name: Run lint
      run: |
        cd vscode-extension
        npm run lint
    
    - name: Compile TypeScript
      run: |
        cd vscode-extension
        npm run compile
    
    - name: Package extension
      run: |
        cd vscode-extension
        npm install -g @vscode/vsce
        vsce package --no-dependencies
    
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: vscode-extension
        path: vscode-extension/*.vsix

  cross-platform-build:
    name: Cross-platform Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: frugal-ls-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: frugal-ls-linux-arm64
            cc: aarch64-linux-gnu-gcc
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: frugal-ls-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: frugal-ls-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        CC: ${{ matrix.cc }}
      run: |
        go build -v -ldflags="-s -w" -o ${{ matrix.artifact_name }} ./cmd/frugal-ls
    
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}